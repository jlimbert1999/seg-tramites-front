// @use "@angular/material" as mat;

// $theme: mat.define-theme(
//   (
//     color: (
//       theme-type: light,
//       primary: mat.$azure-palette,
//       tertiary: mat.$blue-palette,
//     ),
//     density: (
//       scale: 0,
//     ),
//   )
// );

// @include mat.core();
// @include mat.color-variants-backwards-compatibility($theme);

// :root {
//   @include mat.all-component-themes($theme);

//   .tonal {
//     background-color: mat.get-theme-color($theme, secondary-container);
//     color: mat.get-theme-color($theme, on-secondary-container);
//   }

//   .overlay-menu {
//     background-color: mat.get-theme-color($theme, surface-container);
//     color: mat.get-theme-color($theme, on-surface-variant);
//     padding: 15px;
//     border-radius: 5px;
//   }
// }

@use "@angular/material" as mat;
@use "sass:map";

@include mat.core();

$palettes: (
  "red": mat.$red-palette,
  "green": mat.$green-palette,
  "blue": mat.$blue-palette,
  "yellow": mat.$yellow-palette,
  "cyan": mat.$cyan-palette,
  "magenta": mat.$magenta-palette,
  "orange": mat.$orange-palette,
  "chartreuse": mat.$chartreuse-palette,
  "azure": mat.$azure-palette,
  "rose": mat.$rose-palette,
);

$theme-map: ();

// generates theme variables for each color and theme type combination and merges them into $theme-map
// output: $theme-map contains mappings of theme names to color themes for each palette in both dark and light modes
@each $theme in ("dark", "light") {
  @each $color, $palette in $palettes {
    $theme-name: "#{$color}-#{$theme}-theme";
    $theme-map: map.merge(
      $theme-map,
      (
        $theme-name:
          mat.define-theme(
            (
              color: (
                theme-type: $theme,
                primary: $palette,
              ),
            )
          ),
      )
    );
  }
}

// default theme (dark)
$violet-dark-theme: mat.define-theme(
  (
    color: (
      theme-type: dark,
      primary: mat.$violet-palette,
    ),
    // add density only for default theme config to avoid duplicated theming styles
    density:
      (
        scale: -1,
      ),
  )
);

// default light theme
$violet-light-theme: mat.define-theme(
  (
    color: (
      theme-type: light,
      primary: mat.$violet-palette,
    ),
  )
);

@mixin themable-styles($theme) {
  .tonal {
    background-color: mat.get-theme-color($theme, secondary-container);
    color: mat.get-theme-color($theme, on-secondary-container);
  }

  .filled-table {
    --mat-table-row-item-outline-color: mat.get-theme-color($theme, on-secondary-container);
    background-color: mat.get-theme-color($theme, secondary-container);
    color: mat.get-theme-color($theme, on-secondary-container);
    border-radius: 12px;
    overflow: hidden;
  }

  * {
    scrollbar-width: thin;
    scrollbar-color: mat.get-theme-color($theme, secondary-container) transparent;
  }

  // Button color variants
  .secondary-button {
    @include mat.button-color($theme, $color-variant: secondary);
  }

  .tertiary-button {
    @include mat.button-color($theme, $color-variant: tertiary);
  }

  .warn-button {
    @include mat.button-color($theme, $color-variant: error);
  }

  // Icon color variants
  .primary-icon {
    @include mat.icon-color($theme, $color-variant: primary);
  }

  .secondary-icon {
    @include mat.icon-color($theme, $color-variant: secondary);
  }

  .tertiary-icon {
    @include mat.icon-color($theme, $color-variant: tertiary);
  }

  .warn-icon {
    @include mat.icon-color($theme, $color-variant: error);
  }
}

html {
  @include mat.all-component-themes($violet-dark-theme);

  &.violet-dark {
    @include themable-styles($violet-dark-theme);
  }

  &.violet-light {
    @include mat.all-component-colors($violet-light-theme);
    @include themable-styles($violet-light-theme);
  }

  @each $color, $palette in $palettes {
    &.#{$color}-dark {
      @include mat.all-component-colors(map-get($theme-map, "#{$color}-dark-theme"));
      @include themable-styles(map-get($theme-map, "#{$color}-dark-theme"));
    }

    &.#{$color}-light {
      @include mat.all-component-colors(map-get($theme-map, "#{$color}-light-theme"));
      @include themable-styles(map-get($theme-map, "#{$color}-light-theme"));
    }
  }
}

html,
body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

.sidebar-link {
  --mdc-list-list-item-container-shape: 9999px;
}

.flex-wrapper {
  display: flex;
  flex-wrap: wrap;
  gap: 0.55rem;
}

.sections-wrapper {
  display: flex;
  flex-direction: column;
  gap: 1.8rem;
}

